angular.module("app",[]),angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc","$rootScope",function(o,t,n){o.$on("login",function(o,t){n.currentUser=t}),o.logout=function(){o.currentUser="",t.logout()}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,t){o.login=function(n,e){t.login(n,e).then(function(t){o.$emit("login",t.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc","$rootScope",function(o,t){t.fetch().success(function(t){o.posts=t}),o.addPost=function(){o.postBody&&t.create({body:o.postBody}).success(function(){o.postBody=null})},o.$on("ws:new_post",function(t,n){o.$apply(function(){o.posts.unshift(n)})})}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,t){o.register=function(o,n){t.register(o,n).then(function(){alert("Congratulations Now pls login")})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var t=this;t.getUser=function(){return o.get("/api/users")},t.login=function(n,e){return o.post("/api/sessions",{username:n,password:e}).then(function(n){return t.token=n.data,o.defaults.headers.common["X-Auth"]=n.data,console.log("inside login",o.defaults.headers.common),t.getUser()})},t.register=function(n,e){return o.post("/api/users",{username:n,password:e}).then(function(){return t.login(n,e)})},t.logout=function(){delete o.defaults.headers.common["X-Auth"]}}]),angular.module("app").service("WebSocketSvc",["$rootScope","$window",function(o,t){function n(){return"https:"===t.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host}var e;this.connect=function(){e=new WebSocket(n()),e.onmessage=function(t){var n=JSON.parse(t.data);o.$broadcast("ws:"+n.topic,n.data)}},this.send=function(o,t){var n=JSON.stringify({topic:o,data:t});e.send(n)}}]).run(["WebSocketSvc",function(o){o.connect()}]),angular.module("app").run(["$rootScope","$timeout",function(o,t){!function n(){var e="ws://localhost:3000",r=new WebSocket(e);r.onclose=function(){console.log("WebSocket closed. Reconnecting..."),t(n,1e4)},r.onmessage=function(t){var n=JSON.parse(t.data);o.$broadcast("ws:"+n.topic,n.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,